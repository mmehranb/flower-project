import { Injectable } from '@angular/core';
import * as moment from "jalali-moment";

// Generated by https://quicktype.io

export interface Credentials {
  token:    string;
  expires_in:    number;
}

const credentialsKey = 'credentials';

/**
 * Provides storage for authentication credentials.
 * The Credentials interface should be replaced with proper implementation.
 */
@Injectable({
  providedIn: 'root'
})
export class CredentialsService {

  private _credentials: Credentials = null;

  constructor() {
    this._credentials = JSON.parse(localStorage.getItem(credentialsKey)) || null;
  }

  /**
   * Checks is the user is authenticated.
   * @return True if the user is authenticated.
   */
  isAuthenticated(): boolean {
    return !!this.credentials();
  }

  /**
   * Gets the user credentials.
   * @return The user credentials or null if the user is not authenticated.
   */
  credentials(): Credentials {
    // if (this._credentials)
    //   // console.log(moment().diff(moment()));
    //   console.log(moment.unix(this._credentials.expires_in).format("MM/DD/YYYY"));
    
    // // if ( moment().diff(moment(this._credentials.expires_in)))
    return this._credentials;
  }
  /**
   * Sets the user credentials.
   * The credentials may be persisted across sessions by setting the `remember` parameter to true.
   * Otherwise, the credentials are only persisted for the current session.
   * @param credentials The user credentials.
   * @param remember True to remember credentials across sessions.
   */
  setCredentials(credentials?: Credentials) {
    this._credentials = credentials || null;
    if (credentials) {
      const storage = localStorage;
      storage.setItem('credentials', JSON.stringify(credentials));
    } else {
      sessionStorage.removeItem(credentialsKey);
      localStorage.removeItem(credentialsKey);
    }
  }
}
